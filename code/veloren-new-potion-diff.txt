Summary of changes:

    Add new items to the game for practice
    * Add `MarleySprite`, a sprite based off of PurpleFlower.
    * Add an item "Cosmic Flower" that can be collected from `MarleySprite`
    * Add a craftable potion: "Galaxy Milk".
        - Crafted from Cosmic Flower, honey, and empty vial
    * Add a new BuffKind for the potion effect for Galaxy Milk
        - Increases attack speed and reduces damage taken

Diff generated by git:

 assets/common/items/consumable/galaxy_milk.ron (new) | 22 ++++++++++++++++++++++
 assets/common/items/flowers/cosmic.ron (new)         |  9 +++++++++
 assets/common/recipe_book.ron                        |  9 +++++++++
 assets/voxygen/voxel/sprite_manifest.ron             | 10 ++++++++++
 common/src/cmd.rs                                    |  1 +
 common/src/comp/buff.rs                              | 18 +++++++++++++++++-
 common/src/terrain/sprite.rs                         |  2 ++
 voxygen/src/hud/chat.rs                              |  3 ++-
 voxygen/src/hud/mod.rs                               |  3 +++
 voxygen/src/hud/util.rs                              |  6 ++++--
 10 files changed, 79 insertions(+), 4 deletions(-)

diff --git a/assets/common/items/consumable/galaxy_milk.ron b/assets/common/items/consumable/galaxy_milk.ron
new file mode 100644
index 000000000..4242d746d
--- /dev/null
+++ b/assets/common/items/consumable/galaxy_milk.ron
@@ -0,0 +1,22 @@
+ItemDef(
+    name: "Galaxy Milk",
+    description: "A sparkly mixture.",
+    kind: Consumable(
+        kind: Drink,
+        effects: [
+            Buff((
+                kind: MarleyBuffKind,
+                data: (
+                    strength: 5.0,
+                    duration: Some((
+                            secs: 15,
+                            nanos: 0,
+                        )),
+                    ),
+                cat_ids: [Natural],
+            )),
+        ]
+    ),
+    quality: Common,
+    tags: [Potion],
+)
diff --git a/assets/common/items/flowers/cosmic.ron b/assets/common/items/flowers/cosmic.ron
new file mode 100644
index 000000000..355317d59
--- /dev/null
+++ b/assets/common/items/flowers/cosmic.ron
@@ -0,0 +1,9 @@
+ItemDef(
+    name: "Cosmic Flower",
+    description: "It looks like a galaxy in your hand.",
+    kind: Ingredient(
+        kind: "Flower",
+    ),
+    quality: Common,
+    tags: [],
+)
diff --git a/assets/common/recipe_book.ron b/assets/common/recipe_book.ron
index 3739c1417..725d012b3 100644
--- a/assets/common/recipe_book.ron
+++ b/assets/common/recipe_book.ron
@@ -49,6 +49,15 @@
         ],
         craft_sprite: Some(Cauldron),
     ),
+    "galaxy_milk": (
+        output: ("common.items.consumable.galaxy_milk", 1),
+        inputs: [
+            (Item("common.items.crafting_ing.empty_vial"), 1),
+            (Item("common.items.flowers.cosmic"), 1),
+            (Item("common.items.crafting_ing.honey"), 1),
+        ],
+        craft_sprite: Some(Cauldron),
+    ),
     "cactus_colada": (
         output: ("common.items.food.cactus_colada", 1),
         inputs: [
diff --git a/assets/voxygen/voxel/sprite_manifest.ron b/assets/voxygen/voxel/sprite_manifest.ron
index 4a35d97a5..a0b6739a4 100644
--- a/assets/voxygen/voxel/sprite_manifest.ron
+++ b/assets/voxygen/voxel/sprite_manifest.ron
@@ -3884,4 +3884,14 @@ EnsnaringWeb: Some((
     ],
     wind_sway: 0.0,
 )),
+MarleySprite: Some((
+    variations: [
+        (
+            model: "voxygen.voxel.sprite.flowers.flower_purple_1",
+            offset: (-6.0, -6.0, 0.0),
+            lod_axes: (1.0, 1.0, 1.0),
+        )
+    ],
+    wind_sway: 3.0,
+)),
 )
diff --git a/common/src/cmd.rs b/common/src/cmd.rs
index 0d104684f..6ffa46b2a 100644
--- a/common/src/cmd.rs
+++ b/common/src/cmd.rs
@@ -213,6 +213,7 @@ lazy_static! {
             BuffKind::Ensnared => "ensnared",
             BuffKind::Poisoned => "poisoned",
             BuffKind::Hastened => "hastened",
+            BuffKind::MarleyBuffKind => "quick and tough",
         };
         let mut buff_parser = HashMap::new();
         BuffKind::iter().for_each(|kind| {buff_parser.insert(string_from_buff(kind).to_string(), kind);});
diff --git a/common/src/comp/buff.rs b/common/src/comp/buff.rs
index 3d7cf2afa..e85b28281 100644
--- a/common/src/comp/buff.rs
+++ b/common/src/comp/buff.rs
@@ -50,6 +50,9 @@ pub enum BuffKind {
     /// Strength scales strength of both effects linearly. 0.5 is a 50%
     /// increase, 1.0 is a 100% increase.
     Hastened,
+    /// New experimental BuffKind by Marley
+    /// Increases attack speed and reduces damage taken
+    MarleyBuffKind,
     // Debuffs
     /// Does damage to a creature over time
     /// Strength should be the DPS of the debuff
@@ -97,7 +100,8 @@ impl BuffKind {
             | BuffKind::IncreaseMaxHealth
             | BuffKind::Invulnerability
             | BuffKind::ProtectingWard
-            | BuffKind::Hastened => true,
+            | BuffKind::Hastened
+            | BuffKind::MarleyBuffKind => true,
             BuffKind::Bleeding
             | BuffKind::Cursed
             | BuffKind::Burning
@@ -359,6 +363,18 @@ impl Buff {
                 ],
                 data.duration,
             ),
+            BuffKind::MarleyBuffKind => (
+                vec![
+                    BuffEffect::AttackSpeed(1.0 + data.strength),
+                    BuffEffect::DamageReduction(
+                        // Causes non-linearity in effect strength, but necessary to allow for tool
+                        // power and other things to affect the strength. 0.5 also still provides 50%
+                        // damage reduction.
+                        nn_scaling(data.strength),
+                    ),
+                ],
+                data.duration,
+            ),
         };
         Buff {
             kind,
diff --git a/common/src/terrain/sprite.rs b/common/src/terrain/sprite.rs
index 5bf979c7f..3d6275f9b 100644
--- a/common/src/terrain/sprite.rs
+++ b/common/src/terrain/sprite.rs
@@ -209,6 +209,7 @@ make_case_elim!(
         Hearth = 0xB6,
         ForgeTools = 0xB7,
         CliffDecorBlock = 0xB8,
+        MarleySprite = 0xB9,
     }
 );
 
@@ -342,6 +343,7 @@ impl SpriteKind {
             //SpriteKind::LongGrass => item("common.items.grasses.long"),
             //SpriteKind::MediumGrass => item("common.items.grasses.medium"),
             //SpriteKind::ShortGrass => item("common.items.grasses.short"),
+            SpriteKind::MarleySprite => item("common.items.flowers.cosmic"),
             SpriteKind::Coconut => item("common.items.food.coconut"),
             SpriteKind::Beehive => item("common.items.crafting_ing.honey"),
             SpriteKind::Stones => item("common.items.crafting_ing.stones"),
diff --git a/voxygen/src/hud/chat.rs b/voxygen/src/hud/chat.rs
index d7f0b5af9..1a329e175 100644
--- a/voxygen/src/hud/chat.rs
+++ b/voxygen/src/hud/chat.rs
@@ -778,7 +778,8 @@ fn insert_killing_buff(buff: BuffKind, localized_strings: &Localization, templat
         | BuffKind::Invulnerability
         | BuffKind::ProtectingWard
         | BuffKind::Frenzied
-        | BuffKind::Hastened => {
+        | BuffKind::Hastened
+        | BuffKind::MarleyBuffKind => {
             tracing::error!("Player was killed by a positive buff!");
             localized_strings.get("hud.outcome.mysterious")
         },
diff --git a/voxygen/src/hud/mod.rs b/voxygen/src/hud/mod.rs
index aa5718fe1..821817ef2 100644
--- a/voxygen/src/hud/mod.rs
+++ b/voxygen/src/hud/mod.rs
@@ -4405,6 +4405,7 @@ pub fn get_buff_image(buff: BuffKind, imgs: &Imgs) -> conrod_core::image::Id {
         BuffKind::ProtectingWard => imgs.buff_dmg_red_0,
         BuffKind::Frenzied { .. } => imgs.buff_frenzy_0,
         BuffKind::Hastened { .. } => imgs.buff_haste_0,
+        BuffKind::MarleyBuffKind { .. } => imgs.buff_frenzy_0,  // needs unique artwork
         //  Debuffs
         BuffKind::Bleeding { .. } => imgs.debuff_bleed_0,
         BuffKind::Cursed { .. } => imgs.debuff_skull_0,
@@ -4430,6 +4431,7 @@ pub fn get_buff_title(buff: BuffKind, localized_strings: &Localization) -> &str
         BuffKind::ProtectingWard => localized_strings.get("buff.title.protectingward"),
         BuffKind::Frenzied => localized_strings.get("buff.title.frenzied"),
         BuffKind::Hastened => localized_strings.get("buff.title.hastened"),
+        BuffKind::MarleyBuffKind => localized_strings.get("buff.title.marleybuffkind"),
         // Debuffs
         BuffKind::Bleeding { .. } => localized_strings.get("buff.title.bleed"),
         BuffKind::Cursed { .. } => localized_strings.get("buff.title.cursed"),
@@ -4467,6 +4469,7 @@ pub fn get_buff_desc(buff: BuffKind, data: BuffData, localized_strings: &Localiz
         },
         BuffKind::Frenzied => Cow::Borrowed(localized_strings.get("buff.desc.frenzied")),
         BuffKind::Hastened => Cow::Borrowed(localized_strings.get("buff.desc.hastened")),
+        BuffKind::MarleyBuffKind => Cow::Borrowed("Increases attack speed and reduces damage taken"),   // need to put description in correct file
         // Debuffs
         BuffKind::Bleeding { .. } => Cow::Borrowed(localized_strings.get("buff.desc.bleed")),
         BuffKind::Cursed { .. } => Cow::Borrowed(localized_strings.get("buff.desc.cursed")),
diff --git a/voxygen/src/hud/util.rs b/voxygen/src/hud/util.rs
index 78325df3a..5f9cc8a91 100644
--- a/voxygen/src/hud/util.rs
+++ b/voxygen/src/hud/util.rs
@@ -189,7 +189,8 @@ pub fn consumable_desc(effects: &[Effect], i18n: &Localization) -> Vec<String> {
                 | BuffKind::Wet
                 | BuffKind::Ensnared
                 | BuffKind::Poisoned
-                | BuffKind::Hastened => "".to_owned(),
+                | BuffKind::Hastened
+                | BuffKind::MarleyBuffKind => "".to_owned(),
             };
 
             write!(&mut description, "{}", buff_desc).unwrap();
@@ -216,7 +217,8 @@ pub fn consumable_desc(effects: &[Effect], i18n: &Localization) -> Vec<String> {
                     | BuffKind::Wet
                     | BuffKind::Ensnared
                     | BuffKind::Poisoned
-                    | BuffKind::Hastened => "".to_owned(),
+                    | BuffKind::Hastened
+                    | BuffKind:: MarleyBuffKind => "".to_owned(),
                 }
             } else if let BuffKind::Saturation | BuffKind::Regeneration = buff.kind {
                 i18n.get("buff.text.every_second").to_string()
